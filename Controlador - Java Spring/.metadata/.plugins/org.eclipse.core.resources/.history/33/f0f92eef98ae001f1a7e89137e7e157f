package com.mx.ProductoMS.Controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.mx.ProductoMS.Dominio.Producto;
import com.mx.ProductoMS.Service.ProductoServiceImp;

@CrossOrigin  //Esta notacion  nos permite que nuestro web service reciva peticiones HTTP

@RestController //La notacion hace referncia que nuestra api es de tipo REST

@RequestMapping(path = "/api/Producto") //Asignando direccion para acceder a nuestra api



public class ProductoWS {
	
	//Nos permite acceder a todas nuestras funcionalidades de nuestra capa de servicios
	@Autowired
	private ProductoServiceImp ser;
	
	//URL------------------------------------>  http://localhost:8005/api/Producto               Esta sera la url para acceder a nuestro Web Service
	
	
	
	
	//Peticion para listar-----------------------------------> http://localhost:8005/api/Producto/products
	@GetMapping(value= "/products")
	public ResponseEntity<?> listar(){
		List<Producto> productos = ser.lista();
		if(productos.isEmpty()) {
			return ResponseEntity.noContent().build();
		}else{
			return ResponseEntity.ok(productos);
		}
	}
	
	
	//Peticon para crear producto------------------------------------> http://localhost:8005/api/Producto/products
	@PostMapping(value = "/products")
	public ResponseEntity<?> crear(@RequestBody Producto producto){
		Producto encontrado = ser.buscar(producto.getIdProducto());
		
		if(encontrado != null) {
			return ResponseEntity.status(HttpStatus.CONFLICT).body("{\"mensaje\":\"Ya existe el id "+producto.getIdProducto()+"\"}");
		}else {
			if(ser.byNombre(producto.getNombre())==true) {
				return ResponseEntity.status(HttpStatus.CONFLICT).body("{\"mensaje\":\"El producto "+producto.getNombre()+" ya existe\"}");
			}else {
				ser.guardar(producto);
				return ResponseEntity.status(HttpStatus.OK).body("{\"mensaje\":\"Se guardo el producto"+producto.getNombre()+"\"}");
			}
		}
	}
	
	
	//Peticion para buscar ------------------------------------------> http://localhost:8005/api/Producto/products
	@GetMapping(value = "/{idProducto}")
	public ResponseEntity<?> buscar(@PathVariable("idProducto") int idProducto){
		Producto encontrado = ser.buscar(idProducto);
		if(encontrado == null) {
			return ResponseEntity.notFound().build();
		}else {
			return ResponseEntity.ok(encontrado);
		}
	}
	
	
	//Peticion para eliminra-------------------------------------------------> http://localhost:8005/api/Producto/products
	@DeleteMapping(value = "/{idProducto}")
	public ResponseEntity<?> eliminar(@PathVariable int idProducto){
		Producto encontrado = ser.buscar(idProducto);
		if(encontrado == null) {
			return ResponseEntity.notFound().build();
		}else {
			ser.eliminar(idProducto);
			return ResponseEntity.status(HttpStatus.OK).body("{\"mensaje\":\"Se elimo el producto "+encontrado.getNombre()+"\"}");
		}
	}
	
	
	//Peticion para editar--------------------------------------------------------------> http://localhost:8005/api/Producto/products
	@PutMapping(value = "/{idProducto}")
	public ResponseEntity<?> actualizar(@PathVariable int idProducto){
		Producto encontrado = ser.buscar(idProducto);
		if(encontrado == null) {
			return ResponseEntity.notFound().build();
		}else {
			ser.editar(encontrado);
			return ResponseEntity.status(HttpStatus.OK).body("{\"mensaje\":\"Se edito el id" + idProducto +"\"}");
		}
	}
	

}
